///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Sura.BC
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Pago recording.
    /// </summary>
    [TestModule("164dfc0b-43a0-4883-8ccb-ee5d690ad794", ModuleType.Recording, 1)]
    public partial class Pago : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Sura.SuraRepository repository.
        /// </summary>
        public static global::Sura.SuraRepository repo = global::Sura.SuraRepository.Instance;

        static Pago instance = new Pago();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Pago()
        {
            NumPoliza = "04440023926";
            Monto = "";
            NumAutorizacion = "21";
            TipoTarjeta = "American Express";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Pago Instance
        {
            get { return instance; }
        }

#region Variables

        string _NumPoliza;

        /// <summary>
        /// Gets or sets the value of variable NumPoliza.
        /// </summary>
        [TestVariable("44c8ebca-9808-49b2-9468-ef21e7ac19e2")]
        public string NumPoliza
        {
            get { return _NumPoliza; }
            set { _NumPoliza = value; }
        }

        string _Monto;

        /// <summary>
        /// Gets or sets the value of variable Monto.
        /// </summary>
        [TestVariable("84541f12-a9bb-4669-970f-b2100a9ceab4")]
        public string Monto
        {
            get { return _Monto; }
            set { _Monto = value; }
        }

        string _NumAutorizacion;

        /// <summary>
        /// Gets or sets the value of variable NumAutorizacion.
        /// </summary>
        [TestVariable("a5ce3ddc-a5bb-45fb-98ff-92fc97d89973")]
        public string NumAutorizacion
        {
            get { return _NumAutorizacion; }
            set { _NumAutorizacion = value; }
        }

        string _TipoTarjeta;

        /// <summary>
        /// Gets or sets the value of variable TipoTarjeta.
        /// </summary>
        [TestVariable("310a755b-f25f-40f8-a4d3-741e10611731")]
        public string TipoTarjeta
        {
            get { return _TipoTarjeta; }
            set { _TipoTarjeta = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable Ambiente.
        /// </summary>
        [TestVariable("e249a1a2-b157-42ff-9826-60bc615aa12c")]
        public string Ambiente
        {
            get { return repo.Ambiente; }
            set { repo.Ambiente = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'SURA.BC.NuevoPago.txtbox_NumeroDePoliza'.", repo.SURA.BC.NuevoPago.txtbox_NumeroDePolizaInfo, new RecordItemIndex(0));
            Keyboard.PrepareFocus(repo.SURA.BC.NuevoPago.txtbox_NumeroDePoliza);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NumPoliza' with focus on 'SURA.BC.NuevoPago.txtbox_NumeroDePoliza'.", repo.SURA.BC.NuevoPago.txtbox_NumeroDePolizaInfo, new RecordItemIndex(1));
            repo.SURA.BC.NuevoPago.txtbox_NumeroDePoliza.PressKeys(NumPoliza);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SURA.BC.txt_PagosMedianteFacturacionDirecta' at Center.", repo.SURA.BC.txt_PagosMedianteFacturacionDirectaInfo, new RecordItemIndex(2));
            repo.SURA.BC.txt_PagosMedianteFacturacionDirecta.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'SURA.BC.NuevoPago.Copy_of_txtbox_NumeroDePoliza'", repo.SURA.BC.NuevoPago.Copy_of_txtbox_NumeroDePolizaInfo, new ActionTimeout(30000), new RecordItemIndex(3));
            repo.SURA.BC.NuevoPago.Copy_of_txtbox_NumeroDePolizaInfo.WaitForNotExists(30000);
            
            try {
                Report.Log(ReportLevel.Info, "Get Value", "(Optional Action)\r\nGetting attribute 'InnerText' from item 'SURA_ContinueOnFail.montoPagar' and assigning the part of its value captured by '[0-9.,]+' to variable 'Monto'.", repo.SURA_ContinueOnFail.montoPagarInfo, new RecordItemIndex(4));
                Monto = repo.SURA_ContinueOnFail.montoPagar.Element.GetAttributeValueText("InnerText", new Regex("[0-9.,]+"));
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            Report.Log(ReportLevel.Info, "User", "El monto a pagar es:", new RecordItemIndex(5));
            
            Report.Log(ReportLevel.Info, "User", Monto, new RecordItemIndex(6));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{LControlKey down}{Akey}{LControlKey up}' with focus on 'SURA.BC.NuevoPago.txtbox_Monto'.", repo.SURA.BC.NuevoPago.txtbox_MontoInfo, new RecordItemIndex(7));
            repo.SURA.BC.NuevoPago.txtbox_Monto.PressKeys("{LControlKey down}{Akey}{LControlKey up}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Monto' with focus on 'SURA.BC.NuevoPago.txtbox_Monto'.", repo.SURA.BC.NuevoPago.txtbox_MontoInfo, new RecordItemIndex(8));
            repo.SURA.BC.NuevoPago.txtbox_Monto.PressKeys(Monto);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SURA.BC.txt_PagosMedianteFacturacionDirecta' at Center.", repo.SURA.BC.txt_PagosMedianteFacturacionDirectaInfo, new RecordItemIndex(9));
            repo.SURA.BC.txt_PagosMedianteFacturacionDirecta.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'SURA.BC.NuevoPago.Copy_of_txtbox_Monto'", repo.SURA.BC.NuevoPago.Copy_of_txtbox_MontoInfo, new ActionTimeout(30000), new RecordItemIndex(10));
            repo.SURA.BC.NuevoPago.Copy_of_txtbox_MontoInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NumAutorizacion' with focus on 'SURA.BC.NuevoPago.txtbox_NumAutorizacion'.", repo.SURA.BC.NuevoPago.txtbox_NumAutorizacionInfo, new RecordItemIndex(11));
            repo.SURA.BC.NuevoPago.txtbox_NumAutorizacion.PressKeys(NumAutorizacion);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'SURA.BC.NuevoPago.Copy_of_txtbox_NumAutorizacion'", repo.SURA.BC.NuevoPago.Copy_of_txtbox_NumAutorizacionInfo, new ActionTimeout(30000), new RecordItemIndex(12));
            repo.SURA.BC.NuevoPago.Copy_of_txtbox_NumAutorizacionInfo.WaitForNotExists(30000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'SURA.BC.NuevoPago.txtbox_TipoTarjeta'.", repo.SURA.BC.NuevoPago.txtbox_TipoTarjetaInfo, new RecordItemIndex(13));
            Keyboard.PrepareFocus(repo.SURA.BC.NuevoPago.txtbox_TipoTarjeta);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$TipoTarjeta' with focus on 'SURA.BC.NuevoPago.txtbox_TipoTarjeta'.", repo.SURA.BC.NuevoPago.txtbox_TipoTarjetaInfo, new RecordItemIndex(14));
            repo.SURA.BC.NuevoPago.txtbox_TipoTarjeta.PressKeys(TipoTarjeta);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SURA.BC.txt_PagosMedianteFacturacionDirecta' at Center.", repo.SURA.BC.txt_PagosMedianteFacturacionDirectaInfo, new RecordItemIndex(15));
            repo.SURA.BC.txt_PagosMedianteFacturacionDirecta.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to not exist. Associated repository item: 'SURA.BC.NuevoPago.Copy_of_txtbox_TipoTarjeta'", repo.SURA.BC.NuevoPago.Copy_of_txtbox_TipoTarjetaInfo, new ActionTimeout(30000), new RecordItemIndex(16));
            repo.SURA.BC.NuevoPago.Copy_of_txtbox_TipoTarjetaInfo.WaitForNotExists(30000);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.SURA.Self, false, new RecordItemIndex(17));
            
            try {
                Report.Log(ReportLevel.Info, "Mouse", "(Optional Action)\r\nMouse Left Click item 'SURA_ContinueOnFail.bttn_Ejecutar' at Center.", repo.SURA_ContinueOnFail.bttn_EjecutarInfo, new RecordItemIndex(18));
                repo.SURA_ContinueOnFail.bttn_Ejecutar.Click();
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(18)); }
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'SURA.PC.Emision.PolizaMotor.SolicitudDePolizaNueva.lbl_VerificarMS'", repo.SURA.PC.Emision.PolizaMotor.SolicitudDePolizaNueva.lbl_VerificarMSInfo, new ActionTimeout(60000), new RecordItemIndex(19));
            repo.SURA.PC.Emision.PolizaMotor.SolicitudDePolizaNueva.lbl_VerificarMSInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 6s.", new RecordItemIndex(20));
            Delay.Duration(6000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
