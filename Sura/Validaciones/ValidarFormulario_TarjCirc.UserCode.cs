///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Data;	
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

using iTextSharp.text.pdf;
using iTextSharp.text.pdf.parser;

namespace Sura.Validaciones
{
	public partial class ValidarFormulario_TarjCirc
	{
		/// <summary>
		/// This method gets called right after the recording has been started.
		/// It can be used to execute recording specific initialization code.
		/// </summary>
		private void Init()
		{
			// Your recording specific initialization code goes here.
		}

		public void validarConductor()
		{
			// TODO: Replace the following line with your code implementation.
			//throw new NotImplementedException();
			string text = string.Empty;
			string line = string.Empty;
			string nombreArchivo = (TestSuite.Current.CurrentTestContainer.Parameters["paramNombreArchivo"]).TrimStart(' ');
			string ruta = @"R:\TEMP\Formularios\TarjCirc\" + nombreArchivo;
			
			bool encontrado=false;
			
			//Instancio el PdfReader
			PdfReader Reader = new PdfReader(ruta);
			//Asigno la pagina 1 (Si quiero todas las paginas tengo que hacer un
			//ciclo for) a la variable text
			text = PdfTextExtractor.GetTextFromPage(Reader,1);
			//Cierro el archivo PDF
			Reader.Close();
			
			//Instancio un StringReader para leer el texto obtenido de la pagina 1
			StringReader sr = new StringReader(text);
		
			
			//Recorro linea a linea el contenido del texto
			while ((line=sr.ReadLine())!= null)
			{
				//Si la linea contiene...
				if (line.Contains(TestSuite.Current.CurrentTestContainer.Parameters["paramConductor"])){
					encontrado=true;
					Report.Log(ReportLevel.Success,"Se ha verificado el conductor en el formulario correctamente.");
					Report.Log(ReportLevel.Info, "El nombre del conductor es: " + TestSuite.Current.CurrentTestContainer.Parameters["paramConductor"]);
				}
								
			}
			
			if(!encontrado){
				Report.Log(ReportLevel.Failure,"No se ha encontrado el conductor en el formulario.");
			}
		}
		
		

	}
}
